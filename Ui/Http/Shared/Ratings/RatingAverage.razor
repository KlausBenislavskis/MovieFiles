@using MovieFiles.Api.Client.Services;
@using System.Globalization
@using MovieFiles.Ui.Http.Pages
@inject IRatingService RatingService
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (IsLoading)
{
}
else if (AverageRating.HasValue)
{
    <div class="@StyleClass.Rating">
        <h4 class="@StyleClass.RatingItem">@AverageRating.Value.ToString("0.0", CultureInfo.InvariantCulture)</h4>
        <img class="@StyleClass.StarItem" src="svgs/star.svg">
    </div>
}
else
{
        <div class="rating">
            <p class="noRating">No ratings available.</p>
        </div>
}

@code {
    [Parameter]
    public int MovieId { get; set; }
    public double? AverageRating { get; set; }
    public bool IsLoading { get; set; } = true;
    [Parameter]
    public bool reRender { get; set; } = false;
    
    [Parameter]
    public MovieDetails.StyleClass StyleClass { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        AverageRating = await RatingService.GetAverageRating(MovieId);
        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && reRender)
        {
            firstRender = true;
        }
        if (firstRender)
        {
            AverageRating = await RatingService.GetAverageRating(MovieId);
            IsLoading = false;
            reRender = false;
            StateHasChanged();
        }
    }

}
