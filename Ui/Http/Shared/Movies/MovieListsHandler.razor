@using MovieFiles.Core.Interfaces.Statistics
@inject IMovieDetailsService MovieDetailsService
@inject IMoiveListService MovieListservice
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject IMovieStatisticsService MovieStatisticsService

<table class="block-items">
    <thead>
    <tr>
        <th class="table-data-stats" colspan="3">
            <h2 class="stats">OTHERS PEOPLE</h2>
        </th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td class="table-data-stats">
            FAVORITES
        </td>
        <td class="table-data-stats">
            WATCHED
        </td>
        <td class="table-data-stats">
            WATCH LATER
        </td>
    </tr>
    <tr>
        <td class="table-data-stats">
            <span> @_movieStatistics.FavoriteCount </span>
        </td>
        <td class="table-data-stats">
            <span> @_movieStatistics.AlreadyWatchedCount </span>
        </td>
        <td class="table-data-stats">
            <span>@_movieStatistics.WatchLaterCount </span>
        </td>
    </tr>
    <AuthorizeView>
        <Authorized>
            <tr>
                <td class="table-data-stats">
                    <MovieFiles.Ui.Http.Shared.Movies.MovieListButton Name="Favorites" movieId=@MovieId userId=@UserId
                                                                      movieType=@Core.Models.MyMovieListItem.ListType.TOPLIST ListOfMovieListNames=@MovieTypesList />
                </td>
                <td class="table-data-stats">
                    <MovieFiles.Ui.Http.Shared.Movies.MovieListButton Name="Watched" movieId=@MovieId userId=@UserId
                                                                      movieType=@Core.Models.MyMovieListItem.ListType.ALREADY_WATCHED ListOfMovieListNames=@MovieTypesList />
                </td>
                <td class="table-data-stats">
                    <MovieFiles.Ui.Http.Shared.Movies.MovieListButton Name="Watch Later" movieId=@MovieId userId=@UserId
                                                                      movieType=@Core.Models.MyMovieListItem.ListType.WATCH_LATER ListOfMovieListNames=@MovieTypesList />
                </td>
            </tr>
        </Authorized>
    </AuthorizeView>
    </tbody>
</table>

@code {

    [Parameter]
    public int MovieId { get; set; }

    public Guid UserId { get; set; }
    public List<string> MovieTypesList { get; set; }

    private MovieStatistics _movieStatistics { get; set; }

    protected override Task OnInitializedAsync()
    {
        _movieStatistics = new MovieStatistics();

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _movieStatistics = await GetMovieStatistics(MovieId);
            StateHasChanged();

            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            if (authState?.User?.Identity?.IsAuthenticated ?? false)
            {
                UserId = authState.User.GetUserId();
                MovieTypesList = await MovieListservice.GetMovieLists(UserId, MovieId);
            }
            StateHasChanged();
        }
    }

    private async Task<MovieStatistics> GetMovieStatistics(int movieId)
    {
        var result = await MovieStatisticsService.GetAllStatisticsMovieListAsync(movieId);
        return result;
    }

}