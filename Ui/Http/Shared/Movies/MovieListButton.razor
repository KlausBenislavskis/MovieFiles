@inject IMovieDetailsService MovieDetailsService
@inject IMoiveListService MovieListservice

<button class="gray-button" @onclick=handleClick disabled=@(isLoading)>
    @verbPrefix @Name
</button>

@code {
    [Parameter]
    public bool AlreadyExists {get;set;} = false;
    [Parameter]
    public Core.Models.MyMovieListItem.ListType movieType {get;set;}
    // list of movielist names that this user have this movie in
    [Parameter]
    public List<string> ListOfMovieListNames {get;set;}
    [Parameter]
    public string Name {get;set;} = "";
    private string verbPrefix {get;set;} = "";
    [Parameter]
    public int movieId {get;set;}
    [Parameter]
    public Guid userId {get;set;}
    protected bool isLoading {get;set;} = false;

    protected override void OnParametersSet(){
        if (ListOfMovieListNames != null){
            AlreadyExists = ListOfMovieListNames.Contains(Core.Models.MyMovieListItem.GetListTypeName(movieType));
            setVerbPrefix();
        }
    }

    private void setVerbPrefix(){
        if (AlreadyExists){
            verbPrefix = "Remove ";
        } else {
            verbPrefix = "";
        }
        StateHasChanged();
    }
    
    private void handleClick(){
        handleClickAsync();
    }

    private async Task handleClickAsync(){
        if (!AlreadyExists){
            AlreadyExists = true;
            isLoading = true;
            setVerbPrefix();
            if (await MovieListservice.AddMovieToMovieList(userId,movieId,movieType)){
                isLoading = false;
                StateHasChanged();
            }
        } else {
            AlreadyExists = false;
            isLoading = true;
            setVerbPrefix();
            if (await MovieListservice.RemoveMovieFromMovieList(userId,movieId,movieType)){
                isLoading = false;
                StateHasChanged();
            }
        }
        
    }
}