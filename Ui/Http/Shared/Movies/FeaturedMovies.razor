@using MovieFiles.Core.Models
@using MovieFiles.Api.Client.Services
@using Microsoft.AspNetCore.Diagnostics
@inject IMoviesService MoviesService
@inject IJSRuntime JSRuntime


<div class="movies-container">
    @foreach (var movie in MovieList.Results)
    {
        <Movie Movie="@movie"></Movie>
    }
</div>


<ul id="page-list">
    <li @onclick="() => UpdatePage(1)">
        «
    </li>
    @for (int i = @Page - @PageRange; i <= @Page + @PageRange; i++)
    {
        if (i >= 1 && i <= @TotalPages)
        {
            var pageI = i;
            if (i == @Page)
            {
                <li class="active" @onclick="() => UpdatePage(pageI)">
                    @pageI
                </li>
            }
            else
            {
                <li class="" @onclick="() => UpdatePage(pageI)">
                    @pageI
                </li>
            }
        }
    }
    <li @onclick="() => UpdatePage(TotalPages)">
        »
    </li>
</ul>


@code {
    public MovieList MovieList = new MovieList(12);
    public int Page { get; set; } = 1;
    [Parameter]
    public Func<int, Task<MovieList>>? MovieGetter { get; set; }
    public  readonly int TotalPages = 500;
    public  readonly int PageRange = 3;
    public bool IsFirstRender = true;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.Page = Math.Max(1, this.Page);
            if (MovieGetter != null)
            {
                //Making loading effect
                MovieList = await MovieGetter(Page);
                IsFirstRender = false;
            }
            StateHasChanged();
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (IsFirstRender)
        {
            return;
        }
        this.Page = Math.Max(1, this.Page);
        if (MovieGetter != null)
        {
            //Making loading effect

            MovieList = new MovieList(25);

            MovieList = await MovieGetter(Page);
        }
    }

    async Task UpdatePage(int newPage)
    {
        if (Page != newPage)
        {
            Page = newPage;
            MovieList = new MovieList(25);
            MovieList = await MovieGetter(Page);
            await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        }
    }
}
